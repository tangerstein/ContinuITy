buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.1.1"
  }
}

apply plugin: "de.marcphilipp.nexus-publish"
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Finchley.M4'
	}
}
dependencies {
	compile project(':continuity.idpa')
	compile project(':continuity.api')
	
	
	compile group: 'net.sf.markov4jmeter', name: 'm4jdsl', version: '1.0.0'
	
	// Needed for WESSBAS:
	
	compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.common', version: '2.12.0'
	compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore', version: '2.12.0'
	compile group: 'org.eclipse.emf', name: 'org.eclipse.emf.ecore.xmi', version: '2.12.0'
	
	compile group: 'net.sf.markov4jmeter', name: 'testplangenerator', version: '1.0.1'
	// Used version also considers thinktimes to the exit state
	compile group: 'net.voorn', name: 'markov4jmeter', version: '1.0.20181115'
	
	// JMeter 
	
	compile (group: 'org.apache.jmeter', name: 'ApacheJMeter_core', version: '3.1') {
		exclude group: 'org.mongodb', module: 'mongo-java-driver'
	}
	compile (group: 'org.apache.jmeter', name: 'ApacheJMeter_components', version: '3.1') {
		exclude group: 'org.mongodb', module: 'mongo-java-driver'
	}
	compile (group: 'org.apache.jmeter', name: 'ApacheJMeter_http', version: '3.1') {
		exclude group: 'org.mongodb', module: 'mongo-java-driver'
	}
	
	compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
	
	// CSV parsing
	compile group: 'com.univocity', name: 'univocity-parsers', version: '2.7.5'
	
	// Required for Eclipse
	compile("org.codehaus.groovy:groovy-all:2.4.7")
}

/**
 * Creates jar with sources.
 */
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
/**
 * Creates jar with javadocs.
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
}

apply plugin: 'signing'

nexusPublishing {
	if(gradle.startParameter.getTaskNames().contains("continuity.commons:publish")){
    username = project.property('sonatype.username')
	password = project.property('sonatype.password')
	packageGroup = "com.github.continuity-project"
	// Artifacts to build
	artifacts {
		archives sourcesJar, javadocJar
	}
	// Sign the artifacts
	signing {
		sign configurations.archives
	}
	group = "com.github.continuity-project"
	archivesBaseName = "continuity.api"
	stagingProfileId = "6ca7f6472fe302"
	}
}
	
	
	
	nexusStaging {
		if(gradle.startParameter.getTaskNames().contains("continuity.commons:closeAndReleaseRepository")){
		// check if necessary parameter exists
		if (!project.hasProperty('sonatype.username') || !project.hasProperty('sonatype.password')) {
			throw new GradleException('Credentials for Sonytype are missing.')
		}
		username = project.property('sonatype.username')
		password = project.property('sonatype.password')
		stagingProfileId = "6ca7f6472fe302"
		}
}